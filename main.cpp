#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "getInforFromDhcpReq.h"

#include <iostream>
#include <sstream>

int char2int(char input)
{
  if(input >= '0' && input <= '9')
    return input - '0';
  if(input >= 'A' && input <= 'F')
    return input - 'A' + 10;
  if(input >= 'a' && input <= 'f')
    return input - 'a' + 10;
}

// This function assumes src to be a zero terminated sanitized string with
// an even number of [0-9a-f] characters, and target to be sufficiently large
void hex2bin(const char* src, char* target)
{
  while(*src && src[1])
  {
    *(target++) = char2int(*src)*16 + char2int(src[1]);
    src += 2;
  }
}



int main()
{
    std::string hex_string =
        "010106015d05478d000000000000000000000000000000000afee20120e52ab8151400"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000638253633501013707"
        "0102030407067d3c0a646f63736973332e303a7d7f0000118b7a010102057501010102"
        "010303010104010105010106010107010f0801100901030a01010b01180c01010d0200"
        "400e0200100f010110040000000211010014010015013f160101170101180104190104"
        "1a01041b01201c01021d01081e01201f01102001102101022201012301002401002501"
        "01260200ff2701012b59020345434d030b45434d3a45524f55544552040d3242523232"
        "39553430303434430504312e3034060856312e33332e30330707322e332e3052320806"
        "30303039354209094347333030304443520a074e657467656172fe01083d0fff2ab815"
        "140003000120e52ab81514390205dc5219010420000002020620e52ab8151409090000"
        "118b0401020300ff";

    /*char inputMsg[hex_string.length()/2];

    hex2bin(hex_string.c_str(), inputMsg);

    int i = 0;
    for(i = 0; i < hex_string.length()/2; i++)
    {
        printf("%02x", inputMsg[i]);
    }*/

    char inputMsg[] = {

0x01, 0x01, 0x06, 0x00, 0x00, 0x02, 0xc4, 0x38, 

0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x18, 0x4a, 0x6f, 0x8b, 

0xe1, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 

0x35, 0x01, 0x03, 0x3d, 0x07, 0x01, 0x18, 0x4a, 

0x6f, 0x8b, 0xe1, 0x05, 0x2b, 0x10, 0x80, 0x02, 

0x00, 0x00, 0x81, 0x04, 0x00, 0x38, 0x00, 0x01, 

0x82, 0x04, 0x01, 0x00, 0x08, 0x00, 0x33, 0x04, 

0xff, 0xff, 0xff, 0xff, 0x3c, 0x0b, 0x41, 0x53, 

0x42, 0x52, 0x46, 0x48, 0x45, 0x41, 0x44, 0x5f, 

0x31, 0x32, 0x04, 0xc0, 0xa8, 0xfd, 0x85, 0x36, 

0x04, 0xc0, 0xa8, 0xfd, 0xc1, 0x37, 0x04, 0x01, 

0x03, 0x06, 0x1c, 0xff };

    
    dhcpReqInfoGet dhcpInfo;
    dhcpInfo.inputDhcpReqMsg((uint8_t *)(inputMsg), hex_string.length()/2);
    uint8_t op = dhcpInfo.getOp();
    printf("---------------------------\r\n");
    printf("op = %02x\r\n", op);
    uint8_t hops = dhcpInfo.getHops();
    printf("hops = %02x\r\n", hops);

    printf("ciAddr = %s\r\n", dhcpInfo.getCiaddrString().c_str());
    printf("yiAddr = %s\r\n", dhcpInfo.getYiaddrString().c_str());
    printf("siAddr = %s\r\n", dhcpInfo.getSiaddrString().c_str());
    printf("giAddr = %s\r\n", dhcpInfo.getGiaddrString().c_str());

    /*PacketBuffer msg_53;
    uint8_t type = 43;
    if(dhcpInfo.GetOptMsgByMsgType(type, msg_53))
    {
        printf("msg_53.size = %d\r\n", msg_53.size());
    }else{
        printf("no opt 53");
    }*/

    std::string rruIP;
    uint8_t bbuPortId;
    uint8_t rruId;

    dhcpInfo.GetAluRRUIPAndTopoInfo(rruIP, bbuPortId, rruId);
    printf("rruIP : %s\r\n", rruIP.c_str());
    printf("bbuPortId : %d\r\n", bbuPortId);
    printf("rruId : %d\r\n", rruId);

}